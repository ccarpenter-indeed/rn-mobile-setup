#!/bin/bash

# Global Vars
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 51`
pink=`tput setaf 13`
reset=`tput sgr0`
DEFAULT_XCODE_VERSION="13.2.1"
DEFAULT_iOS_EMULATOR_VERSION="13.0"
ANDROID_INSTALLATION=1
IOS_INSTALLATION=1
USE_EXPRESS_INSTALLATION=1
SCRIPT_NAME="rn_mobile_setup"
QUIET_MODE=1

# Input Vars
if [[ -n "$1" ]]
then
    if [[ "$1" =~ "m" ]]
    then
        USE_EXPRESS_INSTALLATION=0
    elif [[ "$1" =~ "e" ]]
    then
        USE_EXPRESS_INSTALLATION=1
    fi
    if [[ "$1" =~ "a" ]]
    then
        ANDROID_INSTALLATION=1
        if [[ ! "$1" =~ "i" ]]
        then
            IOS_INSTALLATION=0
        fi
    fi
    if [[ "$1" =~ "i" ]]
    then
        IOS_INSTALLATION=1
        if [[ ! "$1" =~ "a" ]]
        then
            ANDROID_INSTALLATION=0
        fi
    fi
    if [[ "$1" =~ "v" ]]
    then
        QUIET_MODE=0
    elif [[ "$1" =~ "q" ]]
    then
        QUIET_MODE=1
    fi
fi

# Help section
if [[ "$1" =~ "help" || "$1" =~ "usage" ]]
then
    echo "\nThe ${blue}React Native mobile setup${reset} can be run by typing '${pink}source $SCRIPT_NAME${reset}' from the React Native project root.\n
    - - - Optional Flags - - -\n
[   -*\t Name\t\t\tDefault\t\tDescription\t]\n
    -e\t Express mode.\t\tOn\t\tExpress mode will not prompt you unless required for installation.
    -m\t Manual mode.\t\tOff\t\tManual mode will prompt you for optional information as the script runs.
    -a\t Android install.\tOn\t\tAndroid dependencies, runtimes, and simulators will be installed.
    -i\t iOS install.\t\tOn\t\tiOS dependencies, runtimes, and simulators will be installed.
    -q\t Quiet mode.\t\tOn\t\tRuns setup with most logging turned off, only outputting important info.
    -v\t Verbose mode.\t\tOff\t\tRuns setup with all logging on and directed to the console.
    
Flags must be squashed when using multiple. For example...
    '${pink}source $SCRIPT_NAME -eqai${reset}' => Run script in quiet express mode and set up both Android and iOS environments.
    "
    return 0 2> /dev/null || exit 0
fi

# Sanity check for Android/iOS install
if [[ $IOS_INSTALLATION -eq 0 && $ANDROID_INSTALLATION -eq 0 ]]
then
    echo "Please run the $SCRIPT_NAME script with the '-a' or '-i' flag for Android or iOS repsectively (or '-ai' for both)."
    return 0 2> /dev/null || exit 0
fi

# Installation notif
EXPRESS_ITALIC="\e[3mExpress Installation\e[0m"
MANUAL_ITALIC="\e[3mManual Installation\e[0m "
INSTALL_TYPE_ITALIC=$MANUAL_ITALIC
if [[ "$USE_EXPRESS_INSTALLATION" -eq 1 ]]
then
    INSTALL_TYPE_ITALIC=$EXPRESS_ITALIC
fi
INSTALLATION_STR="\n${green}\
#################################\n\
###                           ###\n\
### React Native Mobile Setup ###\n\
###                           ###\n\
###                           ###\n\
### - $INSTALL_TYPE_ITALIC    ${green}###\n\
###                           ###\n\
#################################${reset}\n"

if [[ $IOS_INSTALLATION -eq 1 ]]
then 
INSTALLATION_STR="$INSTALLATION_STR
${blue}\tIMPORTANT\n
To successfully use this script, you must be registered as an Apple Developer.\n
If your apple id is not already registered as an Apple Developer, please visit ${pink}https://developer.apple.com/register/ ${blue}to register.${reset}\n"
fi

echo $INSTALLATION_STR

### ######### ###
### UTILITIES ###
### ######### ###

output_filter() {
    if [[ $QUIET_MODE -eq 1 ]]
    then
        echo "/dev/null"
    else
        echo "/dev/tty" 
    fi
}

# Global Dependencies
echo "\n${blue}info ${reset}Installing global dependencies...\n"
yarn install &> $(output_filter) && echo "Ran yarn install."
brew install node &> $(output_filter) && echo "Installed node."
brew install watchman &> $(output_filter) && echo "Installed watchman."
brew uninstall --force yarn &> $(output_filter)
npm i -g yarn &> $(output_filter) && echo "Reset yarn."
brew cleanup &> $(output_filter) && echo "Ran brew cleanup."

### ####### ###
### ANDROID ###
### ####### ###

android_setup () {

    # Android Dependencies
    echo "\n${blue}info ${reset}Installing Android dependencies...\n"
    brew install --cask adoptopenjdk/openjdk/adoptopenjdk8 &> $(output_filter) && echo "Installed OpenJDK 8."
    brew install --cask android-studio &> $(output_filter) && echo "Installed Android Studio."
    brew install --cask android-sdk &> $(output_filter) && echo "Installed Android SDK."

    # Android Paths
    echo "\n${blue}info ${reset}Adding Android requirements to PATH..."
    BREW_HOME=$(brew --prefix)
    ANDROID_HOME=$HOME/Library/Android/sdk
    TEMP_PATH="\$PATH:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools"

    BEGIN_SETUP_TEXT="# BEGIN Android Setup -- Managed by Indeed"
    if [ $(grep -c "$BEGIN_SETUP_TEXT" "$HOME/.zshrc") -eq 0 ]
    then
        echo "\n$BEGIN_SETUP_TEXT" >> /$HOME/.zshrc
        echo "\nexport ANDROID_HOME=$ANDROID_HOME" >> /$HOME/.zshrc
        echo "\nexport PATH=$TEMP_PATH" >> /$HOME/.zshrc
        echo "\n# END Android Setup -- Managed by Indeed" >> /$HOME/.zshrc
    fi

    source /$HOME/.zshrc

    echo "\nAdded Android requirements to PATH."

    mkdir -p $ANDROID_HOME

    mv -v $BREW_HOME/share/android-sdk/* $ANDROID_HOME

    # Android Studio CLI
    echo "\n${blue}info ${reset}Installing Android CLI...\n"
    if [[ "$USE_EXPRESS_INSTALLATION" -eq 1 ]]
    then 
        yes | sdkmanager --install "system-images;android-29;default;x86" &> $(output_filter) && echo "Installed Android system images."
    else 
        sdkmanager --install "system-images;android-29;default;x86" &> $(output_filter) && echo "Installed Android system images."
    fi

    sdkmanager "platform-tools" "platforms;android-29" "system-images;android-29;default;x86_64" "system-images;android-29;default;x86" &> $(output_filter) && echo "Installed Android platform tools."
    sdkmanager "cmdline-tools;latest" "build-tools;29.0.2" &> $(output_filter) && echo "Installed Android command line tools."

    if [[ "$USE_EXPRESS_INSTALLATION" -eq 1 ]] 
    then 
        yes | sdkmanager --licenses &> $(output_filter) && echo "Signed Android licenses."
    else 
        sdkmanager --licenses
    fi

    sdkmanager --update &> $(output_filter) && echo "Updated Android SDK."

    # AVD Creation
    echo "\n${blue}info ${reset}Creating your Android Virtual Device...\n"

    AVD_NAME="${PWD##*/}_AVD"
    echo "no" | avdmanager create avd -n $AVD_NAME -k "system-images;android-29;default;x86" -d "pixel_xl" -f &> $(output_filter) && echo "Created Android Virtual Device."

    echo "\n${green}✅ Android Setup Complete ${reset}"

}

### ### ###
### iOS ###
### ### ###

ios_setup() {

    # iOS Dependencies
    echo "\n${blue}info ${reset}Installing iOS dependencies..."

    # Get Current Versions
    MIN_XCODE_VERSION=$(cat ios/.xcode-version)
    if [[ -z $MIN_XCODE_VERSION ]]
    then
        MIN_XCODE_VERSION=$DEFAULT_XCODE_VERSION
        echo "\n${yellow}\e[1m⚠\e[0m Unable to find '.xcode-version' file in 'ios' directory for XCode target. Using default of ${MIN_XCODE_VERSION}. 
        To set the project's desired XCode version, please create an .xcode-version file in the ios directory.${reset}"
    else
        echo "\n${blue}Minimum required XCode Version${reset} => $MIN_XCODE_VERSION"
    fi

    MIN_IOS_VERSION=$(sed -n -e '/^platform.\+ios/p' ./ios/Podfile | awk '{print $NF}')
    if [[ -z $MIN_IOS_VERSION ]]
    then
        MIN_IOS_VERSION=$DEFAULT_iOS_EMULATOR_VERSION
        echo "\n${yellow}\e[1m⚠\e[0m Unable to find definition in Podfile for iOS target. Using default of ${MIN_IOS_VERSION}. 
        To set the project's minimum iOS version, please add a version by putting the line 'platform: ios, 'xx.yy.zz'' in your Podfile.${reset}"
    else
        echo "\n${blue}Minimum required iOS Version${reset} => $MIN_IOS_VERSION"
    fi

    MIN_IOS_VERSION=$(echo $MIN_IOS_VERSION | tr -d \')

    echo "\n${blue}info ${reset}Checking current XCode versions..."
    INSTALLED_XCODE_VERSIONS=$(xcversion installed | grep -Eo '[0-9]+\.?[0-9]?\.?[0-9]?' | sort -V | awk '{print $NF}')
    if [[ $QUIET_MODE -eq 0 ]] 
    then 
        echo "\nInstalled XCode Versions${reset} => $INSTALLED_XCODE_VERSIONS" 
    fi

    MOST_UPDATED_XCODE_VERSION="$(echo $INSTALLED_XCODE_VERSIONS | tr '\r\n' ' ' | awk '{print $NF}')"
    if [[ $QUIET_MODE -eq 0 ]] 
    then 
        echo "\nMost updated XCode Version${reset} => $MOST_UPDATED_XCODE_VERSION" 
    fi

    INSTALLED_XCODE_UP_TO_DATE=1 # FALSE
    if [[ $(echo "$MIN_XCODE_VERSION\n$MOST_UPDATED_XCODE_VERSION" | sort -V | head -n1) = $MIN_XCODE_VERSION && ! -z "${MOST_UPDATED_XCODE_VERSION// }" ]]
    then 
        INSTALLED_XCODE_UP_TO_DATE=0 # TRUE
    fi



    # XCode-install (https://github.com/xcpretty/xcode-install)
    echo "\n${blue}info ${reset}Installing XCode-Install... ${pink}(https://github.com/xcpretty/xcode-install)${reset}\n"
    sudo gem install xcode-install &> $(output_filter) && echo "Installed XCode-Install."

    # XCode Download
    IN_USE_XCODE_VERSION=$MOST_UPDATED_XCODE_VERSION
    if [[ $INSTALLED_XCODE_UP_TO_DATE -eq 0 ]]
    then
        if [[ $QUIET_MODE -eq 0 ]] 
        then 
            echo "\nInstalled XCode meets project requirements.${reset}" 
        fi
    else 
        echo "\n${yellow}Installed XCode is out of date per project requirements. Downloading most recent stable XCode...${reset}"
        xcversion install $MIN_XCODE_VERSION
        echo "Installed XCode."
        IN_USE_XCODE_VERSION=$MIN_XCODE_VERSION
    fi

    # iOS Cli Tools
    echo "\n${blue}info ${reset}Installing iOS CLI Tools...\n"
    xcversion install-cli-tools &> $(output_filter) && echo "Installed iOS CLI Tools."

    # iOS Simulator
    echo "\n${blue}info ${reset}Installing iOS simulator...\n"
    xcrun simctl erase all &> $(output_filter) && echo "Cleared current iOS simulators."

    INSTALLED_SIMULATORS=$(xcversion simulators | grep -w "(installed)" | grep -Eo '[0-9]+\.?[0-9]?\.?[0-9]?')
    if [[ $QUIET_MODE -eq 0 ]] 
    then 
        echo "\n${blue}Installed iOS simulators${reset} => $INSTALLED_SIMULATORS" 
    fi

    MOST_UPDATED_SIMULATOR_VERSION="$(echo $INSTALLED_SIMULATORS | tr '\r\n' ' ' | awk '{print $NF}')"
    if [[ $QUIET_MODE -eq 0 ]] 
    then 
        echo "\n${blue}Most updated iOS simulator${reset} => $MOST_UPDATED_SIMULATOR_VERSION" 
    fi

    INSTALLED_SIMULATOR_UP_TO_DATE=1 # FALSE
    if [[ $(echo "$MIN_IOS_VERSION\n$MOST_UPDATED_SIMULATOR_VERSION" | sort -V | head -n1) = $MIN_IOS_VERSION ]]
    then 
        INSTALLED_SIMULATOR_UP_TO_DATE=0 # TRUE
    fi

    IN_USE_SIMULATOR_VERSION=$MOST_UPDATED_SIMULATOR_VERSION
    if [[ $INSTALLED_SIMULATOR_UP_TO_DATE -eq 0 ]]
    then 
        if [[ $QUIET_MODE -eq 0 ]] 
        then 
            echo "\nInstalled iOS emulator $IN_USE_SIMULATOR_VERSION meets project requirements.${reset}" 
        fi
    else
        echo "\n${yellow}Installed iOS is out of date per project requirements. Downloading stable iOS simulator version $MIN_IOS_VERSION...${reset}"
        SIMULATOR_VERSION=$(echo $MIN_IOS_VERSION | tr -d \')
        SIMULATOR_VERSION="iOS $SIMULATOR_VERSION"
        xcversion simulators --install="$SIMULATOR_VERSION" &> $(output_filter) && echo "Installed iOS simulator $SIMULATOR_VERSION."
        IN_USE_SIMULATOR_VERSION=$MIN_IOS_VERSION
    fi

    # Generate ios package
    sudo gem install cocoapods &> $(output_filter) && echo "Installed Cocoapods."
    cd ios && pod install 1> $(output_filter) && echo "Installed pods." && cd ..

    # Restart iOS Simulator Service
    echo "\n${green}✅ iOS Setup Complete ${reset} \n\n${blue}info ${reset}As part of the iOS setup, all instances of simulators and xCode must be closed. Closing now...\n"
    killall Xcode &> $(output_filter) && echo "Stopped all XCode intances."
    sudo killall -9 com.apple.CoreSimulator.CoreSimulatorService &> $(output_filter) && echo "Stopped Core Simulator Service."

}

if [[ $ANDROID_INSTALLATION -eq 1 ]]
then
    android_setup
fi

if [[ $IOS_INSTALLATION -eq 1 ]]
then 
    ios_setup
fi

# Setup Complete
echo "\n${green}✅ All Setup Complete ${reset} \n\nYou may start the application on an emulator by running 'npx react-native run-(android/ios)' from the root of your project.\n\n"